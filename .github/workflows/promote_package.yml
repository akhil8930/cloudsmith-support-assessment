name: Promote Python Package

on:
  repository_dispatch: # Trigger via Cloudsmith webhook
    types:
      - package_synchronized

env:
  CLOUDSMITH_NAMESPACE: ${{ vars.CLOUDSMITH_NAMESPACE }}
  CLOUDSMITH_STAGING_REPO: 'staging'
  CLOUDSMITH_PRODUCTION_REPO: 'production'
  CLOUDSMITH_SERVICE_SLUG: ${{ vars.CLOUDSMITH_SERVICE_SLUG }}
  PACKAGE_TAG: 'ready-for-production' # Tag used for production promotion

permissions:
  id-token: write # Necessary for GitHub to generate an OIDC token

jobs:
  promote:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Debug Webhook Payload
      - name: Log Webhook Payload
        run: |
          echo "Received Webhook Payload: ${{ toJson(github.event.client_payload) }}"
          cat $GITHUB_EVENT_PATH

      # Step 2: Install Cloudsmith CLI with OIDC
      - name: Install Cloudsmith CLI
        uses: cloudsmith-io/cloudsmith-cli-action@v1.0.1
        with:
          oidc-namespace: ${{ env.CLOUDSMITH_NAMESPACE }}
          oidc-service-slug: ${{ env.CLOUDSMITH_SERVICE_SLUG }}

      # Step 3: Extract PACKAGE_NAME and PACKAGE_VERSION
      - name: Extract Package Name and Version
        run: |
          # Extract PACKAGE_NAME and PACKAGE_VERSION from the webhook payload
          PACKAGE_NAME="${{ github.event.client_payload.package_name }}"
          PACKAGE_VERSION="${{ github.event.client_payload.package_version }}"

          if [ -z "$PACKAGE_NAME" ] || [ -z "$PACKAGE_VERSION" ]; then
            echo "PACKAGE_NAME or PACKAGE_VERSION is missing in the webhook payload."
            exit 1
          fi

          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV

          echo "Extracted PACKAGE_NAME: $PACKAGE_NAME"
          echo "Extracted PACKAGE_VERSION: $PACKAGE_VERSION"

      # Step 4: Query the Package Identifier
      - name: Retrieve Package Identifier
        run: |
          # Use PACKAGE_NAME and PACKAGE_VERSION extracted from the webhook payload
          PACKAGE_QUERY="filename:${{ env.PACKAGE_NAME }}-${{ env.PACKAGE_VERSION }}.tar.gz" # Use the correct file extension!
          echo "Searching for package with query: $PACKAGE_QUERY"

          PACKAGE_DATA=$(cloudsmith list package \
            ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }} \
            -q "$PACKAGE_QUERY" -F json)

          echo "Raw PACKAGE_DATA Response: $PACKAGE_DATA"

          IDENTIFIER=$(echo "$PACKAGE_DATA" | jq -r '.data[0].identifier_perm')

          if [ -z "$IDENTIFIER" ] || [ "$IDENTIFIER" = "null" ]; then
            echo "Failed to find package identifier in Cloudsmith response."
            exit 1
          fi

          echo "IDENTIFIER=$IDENTIFIER" >> $GITHUB_ENV
          echo "Found Package Identifier: $IDENTIFIER"

      # Step 5: Tag the Package
      - name: Tag Package with ready-for-production Tag
        run: |
          cloudsmith tag add \
            "${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}/$IDENTIFIER" \
            "${{ env.PACKAGE_TAG }}"

          if [ $? -ne 0 ]; then
            echo "Failed to tag the package with '${{ env.PACKAGE_TAG }}'."
            exit 1
          fi

          echo "Package successfully tagged with '${{ env.PACKAGE_TAG }}'."

      # Step 6: Promote Tagged Packages
      - name: Promote Tagged Packages to Production
        run: |
          PACKAGE_QUERY="tags:${{ env.PACKAGE_TAG }}"
          echo "Searching for all packages tagged with query: $PACKAGE_QUERY"

          PACKAGE_DATA=$(cloudsmith list package \
            ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }} \
            -q "$PACKAGE_QUERY" -F json)

          echo "Raw PACKAGE_DATA for Tagged Packages: $PACKAGE_DATA"

          IDENTIFIERS=$(echo "$PACKAGE_DATA" | jq -r '.data[].identifier_perm')

          if [ -z "$IDENTIFIERS" ]; then
            echo "No packages found with tag '${{ env.PACKAGE_TAG }}'. Exiting."
            exit 0
          fi

          echo "Found packages tagged with '${{ env.PACKAGE_TAG }}': $IDENTIFIERS"

          for ID in $IDENTIFIERS; do
            cloudsmith mv --yes \
              ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}/$ID \
              ${{ env.CLOUDSMITH_PRODUCTION_REPO }}

            if [ $? -eq 0 ]; then
              echo "Successfully promoted package: $ID"
            else
              echo "Failed to promote package: $ID"
              exit 1
            fi
          done

          echo "All tagged packages promoted to '${{ env.CLOUDSMITH_PRODUCTION_REPO }}'."