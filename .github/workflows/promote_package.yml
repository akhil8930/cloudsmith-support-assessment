name: Promote Python Package

on:
  # Trigger the workflow with a webhook event from the staging repository
  repository_dispatch:
    types:
      - package-synchronized  # Custom webhook event type indicating package sync

env:
  CLOUDSMITH_NAMESPACE: ${{ vars.CLOUDSMITH_NAMESPACE }}
  CLOUDSMITH_STAGING_REPO: 'staging'
  CLOUDSMITH_PRODUCTION_REPO: 'production'
  CLOUDSMITH_SERVICE_SLUG: ${{ vars.CLOUDSMITH_SERVICE_SLUG }}
  PACKAGE_NAME: 'example_package'

permissions:
  id-token: write       # Necessary for GitHub to generate an OIDC token

jobs:
  promote:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Install Cloudsmith CLI with OIDC
      - name: Install Cloudsmith CLI
        uses: cloudsmith-io/cloudsmith-cli-action@v1.0.1
        with:
          oidc-namespace: ${{ env.CLOUDSMITH_NAMESPACE }}
          oidc-service-slug: ${{ env.CLOUDSMITH_SERVICE_SLUG }}

      # Step 2: Tag the incoming package with 'ready-for-production'
      - name: Tag Package with 'ready-for-production'
        run: |
          # Extract package information from the webhook payload
          PACKAGE_NAME_FROM_WEBHOOK=$(echo '${{ github.event.client_payload.package_name }}' | sed 's/["']//g')
          PACKAGE_VERSION_FROM_WEBHOOK=$(echo '${{ github.event.client_payload.package_version }}' | sed 's/["']//g')
          
          echo "Package received from webhook: $PACKAGE_NAME_FROM_WEBHOOK, Version: $PACKAGE_VERSION_FROM_WEBHOOK"

          # Check if package name matches the expected PACKAGE_NAME
          if [ "$PACKAGE_NAME_FROM_WEBHOOK" != "$PACKAGE_NAME" ]; then
            echo "Package name mismatch. Expected: $PACKAGE_NAME, but got: $PACKAGE_NAME_FROM_WEBHOOK"
            exit 1
          fi

          # Query for the package identifier in the staging repository
          PACKAGE_QUERY="filename:${PACKAGE_NAME_FROM_WEBHOOK}-${PACKAGE_VERSION_FROM_WEBHOOK}.tar.gz"
          echo "Searching for package with query: $PACKAGE_QUERY"

          PACKAGE_DATA=$(cloudsmith list package ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }} -q "$PACKAGE_QUERY" -F json)

          IDENTIFIER=$(echo "$PACKAGE_DATA" | jq -r '.data[0].identifier_perm')

          if [ -z "$IDENTIFIER" ] || [ "$IDENTIFIER" = "null" ]; then
            echo "Failed to find package identifier in staging repository."
            exit 1
          fi

          echo "Found package identifier: $IDENTIFIER"

          # Add the 'ready-for-production' tag
          cloudsmith package tags add \
            ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}/$IDENTIFIER \
            ready-for-production
        shell: bash

      # Step 3: Promote all packages tagged with 'ready-for-production' from staging to production
      - name: Promote Packages Tagged as 'ready-for-production'
        run: |
          # Query for all packages tagged with 'ready-for-production'
          PACKAGE_QUERY="tag:ready-for-production"
          echo "Searching for all packages with tag: $PACKAGE_QUERY"

          PACKAGE_DATA=$(cloudsmith list package ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }} -q "$PACKAGE_QUERY" -F json)

          # Iterate over each package identifier and promote
          IDENTIFIERS=$(echo "$PACKAGE_DATA" | jq -r '.data[].identifier_perm')

          if [ -z "$IDENTIFIERS" ]; then
            echo "No packages found tagged with 'ready-for-production'."
            exit 0
          fi

          for IDENTIFIER in $IDENTIFIERS; do
            echo "Promoting package with identifier: $IDENTIFIER"

            # Promote the package
            cloudsmith mv --yes \
              ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}/$IDENTIFIER \
              ${{ env.CLOUDSMITH_PRODUCTION_REPO }}
          done
        shell: bash