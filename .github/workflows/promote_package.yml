name: Promote Python Package

on:
  workflow_dispatch:
    inputs:
      package_version:
        description: 'Package version to promote (e.g., 0.0.1)'
        required: true
        type: string

env:
  CLOUDSMITH_NAMESPACE: ${{ vars.CLOUDSMITH_NAMESPACE }}
  CLOUDSMITH_STAGING_REPO: 'staging'
  CLOUDSMITH_PRODUCTION_REPO: 'production'
  CLOUDSMITH_SERVICE_SLUG: ${{ vars.CLOUDSMITH_SERVICE_SLUG }}
  PACKAGE_NAME: 'example_package'

permissions:
  id-token: write  # Necessary for GitHub to generate an OIDC token

jobs:
  promote:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Obtain Cloudsmith API Token using OIDC
      - name: Obtain Cloudsmith API Token via OIDC
        run: |
          echo "Fetching Cloudsmith OIDC Token..."

          oidc_value=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange" | jq -r '.value')

          cloudsmith_token=$(curl -s -X POST -H "Content-Type: application/json" \
            -d "{\"oidc_token\":\"$oidc_value\", \"service_slug\":\"${{ env.CLOUDSMITH_SERVICE_SLUG }}\"}" \
            "https://api.cloudsmith.io/openid/${{ env.CLOUDSMITH_NAMESPACE }}/" | jq -r '.token')

          if [ -z "$cloudsmith_token" ] || [ "$cloudsmith_token" = "null" ]; then
            echo "Failed to fetch Cloudsmith token!"
            exit 1
          fi

          echo "CLOUDSMITH_API_KEY=$cloudsmith_token" >> $GITHUB_ENV

      # Step 2: Query Cloudsmith for Package Identifier
      - name: Query Cloudsmith for Package Identifier
        env:
          CLOUDSMITH_API_KEY: $CLOUDSMITH_API_KEY
        run: |
          echo "Using Cloudsmith API Key for querying package..."

          PACKAGE_QUERY="filename:${PACKAGE_NAME}-${{ github.event.inputs.package_version }}.tar.gz"
          echo "Searching for package with query: $PACKAGE_QUERY"

          PACKAGE_DATA=$(curl -s -H "Authorization: Bearer $CLOUDSMITH_API_KEY" \
            "https://api.cloudsmith.io/v1/packages/${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}/?query=$PACKAGE_QUERY" \
            -H 'accept: application/json')
          echo "$PACKAGE_DATA" > debug_api_response.json

          IDENTIFIER=$(echo "$PACKAGE_DATA" | jq -r '.[0].identifier_perm' 2>/dev/null)
          if [ -z "$IDENTIFIER" ] || [ "$IDENTIFIER" = "null" ]; then
            echo "Failed to extract `identifier_perm` from API response!"
            echo "Raw API Response: $PACKAGE_DATA"
            exit 1
          fi

          echo "Extracted package identifier: $IDENTIFIER"

      # Step 3: Promote Package to Production Repo
      - name: Promote Package to Production Repo
        env:
          CLOUDSMITH_API_KEY: $CLOUDSMITH_API_KEY
          IDENTIFIER: $IDENTIFIER
        run: |
          if [ -z "$IDENTIFIER" ]; then
            echo "IDENTIFIER is unset or invalid!"
            exit 1
          fi

          echo "Promoting package with following details:"
          echo "Namespace: ${{ env.CLOUDSMITH_NAMESPACE }}"
          echo "Staging Repo: ${{ env.CLOUDSMITH_STAGING_REPO }}"
          echo "Production Repo: ${{ env.CLOUDSMITH_PRODUCTION_REPO }}"
          echo "Identifier: $IDENTIFIER"

          PROMOTION_OUTPUT=$(curl -s -o promotion_result.json -w '%{http_code}' -X POST \
            -H "Authorization: Bearer $CLOUDSMITH_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{\"dest_repo\": \"${{ env.CLOUDSMITH_PRODUCTION_REPO }}\"}" \
            "https://api.cloudsmith.io/v1/packages/${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}/$IDENTIFIER/promote/")

          if [ "$PROMOTION_OUTPUT" -ne 200 ]; then
            echo "Promotion failed! Details:"
            cat promotion_result.json
            exit 1
          fi

          echo "Package promotion completed successfully."